{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"7. 오토인코더_MNIST.ipynb의 사본","provenance":[{"file_id":"1IgfGEennh74T3itkeY1fq6CvnCrEvinp","timestamp":1657611050493}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np"],"metadata":{"id":"Vd59l9TuanMY"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yvdk-2dbXXMX"},"outputs":[],"source":["# 전체 6만개 데이터 중, 5만개는 학습 데이터용, 1만개는 테스트 데이터용으로 분리\n","# image size는 28x28의 grayscale 2차원 데이터\n","\n","from keras.datasets import mnist\n","\n","(train_x, _), (test_x, _) = mnist.load_data() # 비지도 학습이라서 종속변수가 필요 ㄴㄴ"]},{"cell_type":"code","source":["# normalization\n","train_x = np.array(train_x/255.0, dtype=np.float32)\n","test_x = np.array(test_x/255.0, dtype=np.float32)\n","\n","# flatten\n","train_x_flatten = train_x.reshape((train_x.shape[0], -1))  # 60000, 28, 28을 60000, 784로 바꾸어준다.\n","test_x_flatten = test_x.reshape((test_x.shape[0], -1))     # 60000, 28, 28을 60000, 784로 바꾸어준다.\n"," \n","print(train_x_flatten.shape)\n","print(test_x_flatten.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GjDUZisBbZrg","executionInfo":{"status":"ok","timestamp":1657127110357,"user_tz":-540,"elapsed":5,"user":{"displayName":"최우석","userId":"07578836508955032439"}},"outputId":"5452ad0a-f885-4a22-a457-2811f4376e69"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(60000, 784)\n","(10000, 784)\n"]}]},{"cell_type":"markdown","source":["오토인코더 구조 생성"],"metadata":{"id":"eAPZBIGXeW5n"}},{"cell_type":"code","source":["from tensorflow.keras.layers import Input, Dense\n","from tensorflow.keras.models import Model\n","\n","\n","encoding_dim = 32 #인코더와 디코더 구조를 일치시키기 위함 -> 인코딩 차원 : 784개를 32개로 줄임\n"," \n","input_img = Input(shape=(784,)) # 28x28=784로 펼쳐서 입력으로 받음\n","encoded = Dense(encoding_dim, activation='relu')(input_img) #1\n","decoded = Dense(784, activation='sigmoid')(encoded)         #2 \n","# 시그를 쓰는 이유 784로 다시 불리는데 왜 시그를 쓸까? 그냥 인풋이 0~1이니 얘도 0~1\n","\n","  \n","# 1. autoencoder Model 생성 -> 모델을 다 따로 만드네? = 전과정 모델\n","autoencoder = Model(input_img, decoded)\n","# 2. encoder 부분만 추출한 모델 생성 = 앞부분만 짜른 압축된 값이 나오도록 만든 모델\n","encoder = Model(input_img, encoded)\n"," \n","# 3. decoder 부분만 추출한 모델 생성 # 압축된 값을 넣으면 푸는 레이어\n","encoded_input = Input(shape=(encoding_dim,))\n","decoded_layer = autoencoder.layers[-1](encoded_input) #마지막(=2)에 연결 -> decoded(encded, decoded)으로 하면 되는 거 아님?? 안됨 이러면 deceded는 오토인코더와 별개의 레고라서 학습이 안되어있음 학습된 오토인코더의 마지막 층을 가져와야함\n","decoder = Model(encoded_input, decoded_layer)"],"metadata":{"id":"Ba1VoxjOeZoX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["autoencoder.compile(optimizer='adam', loss='binary_crossentropy')  #비지도학습이기에 정확도 계산이 없음 \n","\n","#binary_crossentropy인 이유 -> 위에서 0과 1 사이로 정규화했기 때문."],"metadata":{"id":"dCEWi6XjfcwZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 실제 학습은 오토인코더만 할 거다\n","# 비지도학습이기에 train_x_flatten를 2번 넣어준다.\n","\n","autoencoder.fit(train_x_flatten, train_x_flatten, # 원래값을 넣고 다시 원래값을 뽑을 수 있나 보기 위해 똑같이 종속변수를 준다\n","                batch_size=256, epochs=3, \n","                validation_data=(test_x_flatten,test_x_flatten))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X2ePowkQg2s-","executionInfo":{"status":"ok","timestamp":1657128878707,"user_tz":-540,"elapsed":5730,"user":{"displayName":"최우석","userId":"07578836508955032439"}},"outputId":"9da89449-4536-4f22-e9cb-d78dae7ee4d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","235/235 [==============================] - 2s 8ms/step - loss: 2.5775 - val_loss: 2.5503\n","Epoch 2/3\n","235/235 [==============================] - 2s 7ms/step - loss: 2.5072 - val_loss: 2.5345\n","Epoch 3/3\n","235/235 [==============================] - 2s 8ms/step - loss: 2.4992 - val_loss: 2.5295\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f6940493690>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["# valid_imgs는 정상적으로 encoder와 decoder를 분리했는지 확인하기 위해서\n","# autoencoder를 통한 결과와 encoder와 decoder를 각각 거친 결과가 동일한지 확인\n","\n","encoded_imgs = encoder.predict(test_x_flatten) # 대박 신기한게 fit은 오토만 했는데도 인코더 디코더도 fit이 되어있다/\n","decoded_imgs = decoder.predict(encoded_imgs)\n","\n","# for testing decoded_imgs matched valid_imgs\n","valid_imgs = autoencoder.predict(test_x_flatten)"],"metadata":{"id":"hHU7VxQig84d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n"," \n","n = 10  # 이미지 갯수\n","plt.figure(figsize=(20, 4))\n","for i in range(1, n+1):\n","    # 원본 데이터\n","    ax = plt.subplot(2, n, i)  # subplot(nrows=2, ncols=n, index=i)\n","    plt.imshow(test_x_flatten[i].reshape(28, 28)) #평탄화 시킨 데이터를 다시 28 * 28로 변형\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n"," \n","    # 재구성된 데이터\n","    ax = plt.subplot(2, n, i + n)      \n","    plt.imshow(decoded_imgs[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"Sx6EeCkJhYLJ","executionInfo":{"status":"ok","timestamp":1657128886274,"user_tz":-540,"elapsed":1657,"user":{"displayName":"최우석","userId":"07578836508955032439"}},"outputId":"657f8d2e-a357-4cec-b675-f5818aa97b3b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x288 with 20 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"NzGPdTKJhc9f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"g2q4Sbu2g75C"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["깊은 오토인코더 모델 구현"],"metadata":{"id":"wwBx-z23jnwh"}},{"cell_type":"code","source":["# encoding dimension\n","encoding_dim = 32\n"," \n","input_img = Input(shape=(784,)) # 28*28\n","encoded = Dense(128, activation='relu')(input_img)        #1\n","encoded = Dense(64, activation='relu')(encoded)           #2\n","encoded = Dense(encoding_dim, activation='relu')(encoded) #3\n"," \n","decoded = Dense(64, activation='relu')(encoded)           #4\n","decoded = Dense(128, activation='relu')(decoded)          #5\n","decoded = Dense(784, activation='sigmoid')(decoded)       #6\n"," \n","# autoencoder\n","autoencoder = Model(input_img, decoded)\n"," \n","# encoder\n","encoder = Model(input_img, encoded)\n"," \n","# decoder\n","encoded_input = Input(shape=(encoding_dim,))\n","decoded_layer = autoencoder.layers[4](encoded_input)\n","decoded_layer = autoencoder.layers[5](decoded_layer)\n","decoded_layer = autoencoder.layers[6](decoded_layer)\n","decoder = Model(encoded_input, decoded_layer)\n"," \n","# autoencoder.compile(optimizer='adam', loss='binary_crossentropy')\n","# autoencoder.fit(x_train_flatten, x_train_flatten, \n","#                 batch_size=256, epochs=100, \n","#                 validation_data=(x_test_flatten,x_test_flatten))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_rpmFdlpjps3","executionInfo":{"status":"ok","timestamp":1657128571096,"user_tz":-540,"elapsed":557,"user":{"displayName":"최우석","userId":"07578836508955032439"}},"outputId":"e440f0a7-799d-4b03-8add-a8d8309ddc5a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_11\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_8 (InputLayer)        [(None, 32)]              0         \n","                                                                 \n"," dense_9 (Dense)             (None, 64)                2112      \n","                                                                 \n"," dense_10 (Dense)            (None, 128)               8320      \n","                                                                 \n"," dense_11 (Dense)            (None, 784)               101136    \n","                                                                 \n","=================================================================\n","Total params: 111,568\n","Trainable params: 111,568\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]}]}